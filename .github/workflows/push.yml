name: ESP8266 Arduino CI

on:
  pull_request:


jobs:

  build-linux:
    name: Build ${{ matrix.mod }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mod: [0] #[0, 1, 2, 3, 4, 5, 6, 7]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache Linux toolchain
      id: cache-linux
      uses: actions/cache@v2
      with:
        path: ./tools/dist
        key: key-linux-toolchain
    - name: Build Sketches
      run: |
        TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE BUILD_PARITY=custom mod=8 rem=${{ matrix.mod }} bash ./tests/build.sh


  build-debug-ipv6:
    name: Debug IPv6 ${{ matrix.mod }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mod: [0] # [0, 1, 2, 3, 4, 5, 6, 7]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache Linux toolchain
      id: cache-linux
      uses: actions/cache@v2
      with:
        path: ./tools/dist
        key: key-linux-toolchain
    - name: Build Sketches
      run: |
        TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE BUILD_PARITY=custom mod=8 rem=${{ matrix.mod }} bash ./tests/debug6.sh


  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache Windows toolchain
      id: cache-windows
      uses: actions/cache@v2
      with:
        path: ./tools/dist
        key: key-windows-toolchain
    - name: Build Sketch
      run: |
        copy (get-command python).source (get-command python).source.Replace("python.exe", "python3.exe")
        $env:TRAVIS_BUILD_DIR=$env:GITHUB_WORKSPACE
        $env:WINDOWS="1"
        $env:BUILD_PARITY='"custom"'
        $env:mod="500"
        $env:rem="1"
        bash ./tests/build.sh


  build-mac:
    name: Mac
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache Mac toolchain
      id: cache-mac
      uses: actions/cache@v2
      with:
        path: ./tools/dist
        key: key-mac-toolchain
    - name: Build Sketch
      run: |
        TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE MACOSX=1 BUILD_PARITY=custom mod=500 rem=1 bash ./tests/build.sh


  build-pio:
    name: Build Platform.IO
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Build subset on Platform.IO
      run: |
        sudo apt-get install python3-pip python3-setuptools
        PATH=/home/runner/.local/bin:$PATH TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE BUILD_PARITY=custom mod=27 rem=8 bash ./tests/platformio.sh


  host-tests:
    name: Host tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Run host tests
      run: |
        sudo apt-get install valgrind lcov
        TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE bash ./tests/ci/host_test.sh


  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Build documentation
      run: |
        sudo apt-get install python3-pip python3-setuptools
        PATH=/home/runner/.local/bin:$PATH pip3 install --user -r doc/requirements.txt
        PATH=/home/runner/.local/bin:$PATH TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE ./tests/ci/build_docs.sh


  style-check:
    name: Style and formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Style check
      run: |
          TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE sudo ./tests/ci/install_astyle.sh
          PATH=/home/runner/bin:$PATH TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE ./tests/ci/style_check.sh


  mock-check:
    name: Mock trivial test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Mock build
      run: |
          TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE ./tests/buildm.sh


  boards-check:
    name: Boards.txt check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Boards.txt diff
      run: |
          TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE ./tests/ci/build_boards.sh

  package:
    name: Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Build package JSON
      env:
        TRAVIS_BUILD_DIR: ${{ github.workspace }}
        BUILD_TYPE: package
        CI_GITHUB_API_KEY: ${{ secrets.GITHUB_TOKEN }}
        TRAVIS_TAG: ${{ github.ref }}
      run: |
           ./tests/ci/build_package.sh
    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true
    - name: Upload ZIP file
      id: upload-release-asset-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: package/versions/${{ github.ref }}/esp8266-${{ github.ref }}.zip
        asset_name: esp8266-${{ github.ref }}.zip
        asset_content_type: application/zip
    - name: Upload JSON
      id: upload-release-asset-json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: package/versions/${{ github.ref }}/package_esp8266com_index.json
        asset_name: package_esp8266com_index.json
        asset_content_type: application/json
